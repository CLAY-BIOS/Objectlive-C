/*
//  main.m
//  Objectlive-C-02-OC与C的对比
//
//  Created by 辩识、 on 2020/11/20.
/
    OC程序的编译·链接·执行：
        1.在.m文件中写上符合OC语法规范的源代码。
        2.使用编译器将源代码编译为目标文件。
            cc -c xx.m
            预处理 检查语法 编译
        3.链接
            cc xx.o
            如果程序中使用到了框架中的函数或者类，那么在链接的时候，就必须告诉编译器去哪一个框架中寻找函数或者类。
            cc xx.o -framework 框架名称
            程序中用到了哪一个框架中的功能 那么就在这个地方告诉编译器。
            链接成功以后就会生成一个a.out可执行文件 执行就可以了。
 -----------------------------------------------------------------------------------------------------------
        （当我们点击执行按钮 所有的事情Xcode就帮我们自动完成了）
         OC程序和C程序各个阶段的后缀名对比
                源文件  目标文件  可执行文件
         C       .c      .o      .out
         OC      .m      .o      .out
---------------------------------------------------------------------------------------------------------------
    OC中的数据类型：
        1.OC支持C语言中的所有数据类型。
            基本数据类型：
                int double float char
            构造类型：
                数组 结构体 枚举
            指针类型：
                指针
            空类型：
                void
            typdef自定义类型：
                自定义类型
 
        2.BOOL类型（新增）
            可以存储YES或者NO中的任意一个数据。
            一般情况下BOOL类型的变量用来存储条件表达式的结果，如果条件表达式成立结果就是YES，否则就是NO。
            BOOL的本质:
            typdef signed char BOOL
            实际上BOOL类型的变量 是一个有符号的char变量。
            #define YES ((BOOL)1)
            #define  NO ((BOOL)0)
            YES 实际上就是 1
             NO 实际上就是 0
 
        3.Boolean类型（新增）
            可以存储YES或者NO中的任意一个数据。
            一般情况下BOOL类型的变量用来存储条件表达式的结果，如果条件表达式成立结果就是true，否则就是flase。
            Boolean的本质:
            typdef unsigned char Boolean
            实际上BOOL类型的变量 是一个无符号的char变量。
            #define  true  1
            #define flase  0
             true 实际上就是 1
            flase 实际上就是 0
        4.Class类型，类
        5.id类型 万能指针
        6.nil 和 NULL差不多
        7.SEL 方法选择器
        8.block 代码段
-----------------------------------------------------------------------------------------------------------------------
    OC运算符：
        OC支持C语言中的所有运算符。
    OC的控制语句：
        OC支持C语言中的所有控制语句。
    OC的关键字：
        OC支持C语言中的所有关键字，同时也新增了一些关键字。
        OC中新增的关键字绝大多数都是以@符号开头。
            -@interface
            -@implement
            -@public
            -......
    OC的函数定义和调用：
        与C语言中的函数定义和调用完全一致。
    
------------------------------------------------------------------------------------------------------------------------
    总结：
    OC语言完全兼容C语言，在OC中可以写任意的C代码，并且效果一致。
 
 ---------------------------------------------------------------------------------------------------------------------------
 
 */

#import <Foundation/Foundation.h>

int main(int argc, const char * argv[]) {
    @autoreleasepool {
        // insert code here...
        int a = 10;
        int b = 20;
        BOOL b1 = a > b;
        BOOL b2 = YES;
        Boolean demo = a > b;
        NSLog(@"Hello, World!");
    }
    return 0;
}
